import React, { useState, useEffect, useRef } from 'react';
import { doc, updateDoc } from 'firebase/firestore';
import { getStorage, ref as storageRef, uploadBytes, getDownloadURL } from 'firebase/storage';
import { useUserContext } from './UserContext';
import { usePlayerContext } from './PlayerContext';
import { auth, db } from './firebase';
import { Country, City } from 'country-state-city';
import Select from 'react-select';
import EmojiPicker from 'emoji-picker-react';
import './Settings.css';

// –Ü–∫–æ–Ω–∫–∏
const UserIcon = () => <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M20 21v-2a4 4 0 0 0-4-4H8a4 4 0 0 0-4 4v2"></path><circle cx="12" cy="7" r="4"></circle></svg>;
const PrivacyIcon = () => <svg viewBox="0 0 24 24" fill="none" stroke="currentColor"><path d="M12 22s8-4 8-10V5l-8-3-8 3v7c0 6 8 10 8 10z"></path></svg>;

const Settings = () => {
    const { user, refreshUser } = useUserContext();
    const { showNotification } = usePlayerContext();
    const [activeTab, setActiveTab] = useState('profile');
    const [isSaving, setIsSaving] = useState(false);

    // –°—Ç–∞–Ω–∏ –¥–ª—è –¥–∞–Ω–∏—Ö –ø—Ä–æ—Ñ—ñ–ª—é
    const [displayName, setDisplayName] = useState('');
    const [nickname, setNickname] = useState('');
    const [description, setDescription] = useState('');
    const [profileImageUrl, setProfileImageUrl] = useState('');
    const [backgroundImageUrl, setBackgroundImageUrl] = useState('');
    
    // –°—Ç–∞–Ω–∏ –¥–ª—è –≥–µ–æ–ª–æ–∫–∞—Ü—ñ—ó
    const [countries, setCountries] = useState([]);
    const [cities, setCities] = useState([]);
    const [selectedCountry, setSelectedCountry] = useState(null);
    const [selectedCity, setSelectedCity] = useState(null);

    // –°—Ç–∞–Ω –¥–ª—è –ø—Ä–∏–≤–∞—Ç–Ω–æ—Å—Ç—ñ
    const [isNamePublic, setIsNamePublic] = useState(true);

    // –°—Ç–∞–Ω –¥–ª—è –≤–∞–ª—ñ–¥–∞—Ü—ñ—ó —Ç–∞ UI
    const [nicknameError, setNicknameError] = useState('');
    const [showEmojiPicker, setShowEmojiPicker] = useState(false);
    const emojiPickerRef = useRef(null);

    // --- –ó–ú–Ü–ù–ï–ù–û: –¶–µ–π useEffect —Ç–µ–ø–µ—Ä –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î –∑–∞ –ø–æ–≤–Ω–µ –ø–æ—á–∞—Ç–∫–æ–≤–µ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö ---
    useEffect(() => {
        const countryOptions = Country.getAllCountries().map(c => ({ value: c.isoCode, label: c.name }));
        setCountries(countryOptions);
        
        if (user) {
            setDisplayName(user.displayName || '');
            setNickname(user.nickname || '');
            setDescription(user.description || '');
            setProfileImageUrl(user.photoURL || '');
            setBackgroundImageUrl(user.backgroundImage || '');
            setIsNamePublic(user.isNamePublic !== false);

            const userCountry = countryOptions.find(c => c.value === user.country);
            if (userCountry) {
                setSelectedCountry(userCountry);
                const cityOptions = City.getCitiesOfCountry(userCountry.value).map(c => ({ value: c.name, label: c.name }));
                setCities(cityOptions);

                const userCity = cityOptions.find(c => c.value === user.city);
                if (userCity) {
                    setSelectedCity(userCity);
                }
            }
        }
    }, [user]);

    // --- –í–ò–î–ê–õ–ï–ù–û: –ü—Ä–æ–±–ª–µ–º–Ω–∏–π useEffect, —â–æ –∑–∞–ª–µ–∂–∞–≤ –≤—ñ–¥ [selectedCountry], –≤–∏–¥–∞–ª–µ–Ω–æ ---

    useEffect(() => {
        const handleClickOutside = (event) => {
            if (emojiPickerRef.current && !emojiPickerRef.current.contains(event.target)) {
                setShowEmojiPicker(false);
            }
        };
        document.addEventListener("mousedown", handleClickOutside);
        return () => document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    // --- –î–û–î–ê–ù–û: –ù–æ–≤–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –æ–±—Ä–æ–±–∫–∏ —Ä—É—á–Ω–æ—ó –∑–º—ñ–Ω–∏ –∫—Ä–∞—ó–Ω–∏ ---
    const handleCountryChange = (countryOption) => {
        setSelectedCountry(countryOption);
        const cityOptions = City.getCitiesOfCountry(countryOption.value)?.map(c => ({ value: c.name, label: c.name })) || [];
        setCities(cityOptions);
        setSelectedCity(null); // –û—á–∏—â—É—î–º–æ –º—ñ—Å—Ç–æ, –±–æ –∑–º—ñ–Ω–∏–ª–∞—Å—è –∫—Ä–∞—ó–Ω–∞
    };

    const handleNicknameChange = (e) => {
        const value = e.target.value.toLowerCase();
        setNickname(value);

        if (value && !/^[a-z0-9_.]+$/.test(value)) {
            setNicknameError('–ù—ñ–∫–Ω–µ–π–º –º–æ–∂–µ –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏, —Ü–∏—Ñ—Ä–∏, "_" —Ç–∞ "."');
        } else if (value.length > 0 && (value.length < 3 || value.length > 20)) {
            setNicknameError('–ù—ñ–∫–Ω–µ–π–º –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –≤—ñ–¥ 3 –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤.');
        } else {
            setNicknameError('');
        }
    };

    const handleImageUpload = async (e, imageType) => {
        const file = e.target.files[0];
        if (!file || !user) return;
        const path = imageType === 'profile' ? `profileImages/${user.uid}` : `backgroundImages/${user.uid}`;
        const storage = getStorage();
        const storageReference = storageRef(storage, path);
        try {
            await uploadBytes(storageReference, file);
            const newImageUrl = await getDownloadURL(storageReference);
            if (imageType === 'profile') setProfileImageUrl(newImageUrl);
            else setBackgroundImageUrl(newImageUrl);
            showNotification('–ó–æ–±—Ä–∞–∂–µ–Ω–Ω—è –æ–Ω–æ–≤–ª–µ–Ω–æ!', 'info');
        } catch (error) {
            console.error("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è:", error);
            showNotification(`–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ${error.message}`, 'error');
        }
    };
    
    const onEmojiClick = (emojiObject) => {
        setDescription(prevDescription => prevDescription + emojiObject.emoji);
        setShowEmojiPicker(false);
    };

    const handleSaveChanges = async () => {
        if (!user || nicknameError) return;
        setIsSaving(true);
        try {
            const userRef = doc(db, 'users', user.uid);
            const updatedData = {
                displayName, nickname, description,
                country: selectedCountry ? selectedCountry.value : '',
                city: selectedCity ? selectedCity.value : '',
                photoURL: profileImageUrl,
                backgroundImage: backgroundImageUrl,
                isNamePublic,
            };
            await updateDoc(userRef, updatedData);
            await refreshUser();
            showNotification('–ó–º—ñ–Ω–∏ —É—Å–ø—ñ—à–Ω–æ –∑–±–µ—Ä–µ–∂–µ–Ω–æ!', 'info');
        } catch (error) {
            console.error("–ü–û–ú–ò–õ–ö–ê –ó–ë–ï–†–ï–ñ–ï–ù–ù–Ø –ù–ê–õ–ê–®–¢–£–í–ê–ù–¨:", error);
            showNotification(`–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–±–µ—Ä–µ–≥—Ç–∏: ${error.code}`, 'error');
        } finally {
            setIsSaving(false);
        }
    };

    const renderProfileTab = () => (
        <div className="settings-tab-content">
            {/* ... (–∫–æ–¥ –¥–ª—è —Ñ–æ—Ç–æ, —ñ–º–µ–Ω—ñ, –æ–ø–∏—Å—É –±–µ–∑ –∑–º—ñ–Ω) ... */}
            <div className="form-section">
                <label>–§–æ—Ç–æ —Ç–∞ —Ñ–æ–Ω –ø—Ä–æ—Ñ—ñ–ª—é</label>
                <div className="image-uploaders-container">
                    <div className="image-uploader profile">
                        <img className="image-preview profile" src={profileImageUrl || 'https://placehold.co/128x128/181818/333?text=K'} alt="Profile" />
                        <label htmlFor="profile-image-input" className="button-secondary">–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ—Ç–æ</label>
                        <input id="profile-image-input" type="file" accept="image/*" onChange={(e) => handleImageUpload(e, 'profile')} />
                    </div>
                    <div className="image-uploader background">
                        <img className="image-preview background" src={backgroundImageUrl || 'https://placehold.co/600x200/181818/333?text=Knitly'} alt="Background" />
                        <label htmlFor="background-image-input" className="button-secondary">–ó–º—ñ–Ω–∏—Ç–∏ —Ñ–æ–Ω</label>
                        <input id="background-image-input" type="file" accept="image/*" onChange={(e) => handleImageUpload(e, 'background')} />
                    </div>
                </div>
            </div>
            <div className="form-row">
                <div className="form-group">
                    <label htmlFor="displayName">–Ü–º'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ</label>
                    <input id="displayName" type="text" className="form-input" value={displayName} onChange={(e) => setDisplayName(e.target.value)} />
                </div>
                <div className="form-group">
                    <label htmlFor="nickname">–ù—ñ–∫–Ω–µ–π–º (URL –ø—Ä–æ—Ñ—ñ–ª—é)</label>
                    <div className="input-group">
                        <span>knitly.com/</span>
                        <input id="nickname" type="text" value={nickname} onChange={handleNicknameChange} />
                    </div>
                    {nicknameError && <small className="form-error-text">{nicknameError}</small>}
                </div>
            </div>
            <div className="form-group">
                <label htmlFor="description">–û–ø–∏—Å</label>
                <div className="textarea-wrapper">
                    <textarea id="description" className="form-textarea" value={description} onChange={(e) => setDescription(e.target.value)} rows="4" maxLength="250"></textarea>
                    <div className="textarea-footer">
                        <span className="char-counter">{description.length} / 250</span>
                        <button type="button" className="emoji-button" onClick={() => setShowEmojiPicker(!showEmojiPicker)}>üòÄ</button>
                    </div>
                    {showEmojiPicker && 
                        <div ref={emojiPickerRef} className="emoji-picker-wrapper">
                            <EmojiPicker onEmojiClick={onEmojiClick} theme="dark" />
                        </div>
                    }
                </div>
            </div>

            <div className="form-row">
                <div className="form-group">
                    <label htmlFor="country">–ö—Ä–∞—ó–Ω–∞</label>
                    {/* --- –ó–ú–Ü–ù–ï–ù–û: –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤—É —Ñ—É–Ω–∫—Ü—ñ—é onChange --- */}
                    <Select options={countries} value={selectedCountry} onChange={handleCountryChange} placeholder="–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∞—ó–Ω—É" styles={customSelectStyles} />
                </div>
                <div className="form-group">
                    <label htmlFor="city">–ú—ñ—Å—Ç–æ</label>
                    <Select options={cities} value={selectedCity} onChange={setSelectedCity} placeholder="–û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ç–æ" styles={customSelectStyles} isDisabled={!selectedCountry} />
                </div>
            </div>
        </div>
    );

    const renderPrivacyTab = () => (
        <div className="settings-tab-content">
            <div className="privacy-toggle">
                <div>
                    <p>–ü–æ–∫–∞–∑—É–≤–∞—Ç–∏ –º–æ—î —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ</p>
                    <span>–î–æ–∑–≤–æ–ª–∏—Ç–∏ —ñ–Ω—à–∏–º –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞–º –±–∞—á–∏—Ç–∏ –≤–∞—à–µ —Å–ø—Ä–∞–≤–∂–Ω—î —ñ–º'—è –ø–æ—Ä—É—á –∑ –Ω—ñ–∫–Ω–µ–π–º–æ–º.</span>
                </div>
                <label className="switch">
                    <input type="checkbox" checked={isNamePublic} onChange={() => setIsNamePublic(!isNamePublic)} />
                    <span className="slider round"></span>
                </label>
            </div>
        </div>
    );
    
    return (
        <div className="settings-page-container">
            <header className="settings-page-header">
                <h1>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è</h1>
            </header>
            <div className="settings-layout">
                <aside className="settings-sidebar">
                    <button className={activeTab === 'profile' ? 'active' : ''} onClick={() => setActiveTab('profile')}><UserIcon /> –ü—Ä–æ—Ñ—ñ–ª—å</button>
                    <button className={activeTab === 'privacy' ? 'active' : ''} onClick={() => setActiveTab('privacy')}><PrivacyIcon /> –ü—Ä–∏–≤–∞—Ç–Ω—ñ—Å—Ç—å</button>
                </aside>
                <main className="settings-main-content">
                    {activeTab === 'profile' && renderProfileTab()}
                    {activeTab === 'privacy' && renderPrivacyTab()}
                    <div className="settings-actions">
                        <button className="button-primary" onClick={handleSaveChanges} disabled={isSaving || !!nicknameError}>
                            {isSaving ? "–ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è..." : "–ó–±–µ—Ä–µ–≥—Ç–∏ –∑–º—ñ–Ω–∏"}
                        </button>
                    </div>
                </main>
            </div>
        </div>
    );
};

const customSelectStyles = {
    control: (provided) => ({
        ...provided, backgroundColor: 'var(--color-bg-light)', border: '1px solid var(--color-border)',
        borderRadius: '0.5rem', padding: '0.35rem', boxShadow: 'none', '&:hover': { borderColor: 'var(--color-accent)' }
    }),
    singleValue: (provided) => ({ ...provided, color: 'var(--color-text-primary)' }),
    menu: (provided) => ({
        ...provided, backgroundColor: 'var(--color-bg-light)', border: '1px solid var(--color-border)',
    }),
    option: (provided, state) => ({
        ...provided,
        backgroundColor: state.isSelected ? 'var(--color-accent)' : state.isFocused ? 'var(--color-border)' : 'transparent',
        '&:active': { backgroundColor: 'var(--color-accent)' }, cursor: 'pointer',
    }),
    input: (provided) => ({ ...provided, color: 'var(--color-text-primary)' }),
    placeholder: (provided) => ({ ...provided, color: 'var(--color-text-placeholder)' }),
};

export default Settings;